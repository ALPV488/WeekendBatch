on	- 0,	off - 1			coding :-ASCII,UNICODE

programs:-set of instructions


												pro lang
								
						pop(procedure o pl)					oop(object o p)
					
				basic,cobal....								java,.net,lisp...
				
				

platorm independency


garbage collector

oopl	--------->		oops

Inheritance,Polymorphism:-Performance

Abstraction,Encapsulation:-Security

sunmicrosys's--------------------------------->orcale
		greentalk(.gt)-------->oak---------->java(.java)
		
		
		jdk 1.0								jdk 21
		
		
	
	jse/j2se:-core java (standlone (server-client))
	
	jee/j2ee:-distributed(server-client)
	
	jme/j2me:-mobile app's
	
	
	keywords:-predefined words(53)
	
		
		
		class test
		{
		public static void main(String []args)
		{
		byte x=10;
		}
		}
		
	


platorm independency:-


class = class members + member's functions

	
	variables:-
	
					syntax:-
					
			datatype varname = value;
			
declaration:-  G.v  --->outside the methods and inside the class

				L.v ---->inside the method body		
										 
										 
				 global variables					local variables
						
		static g.v  		instance g.v

syntax:-
						
static:-	static	datatype varname = value;
	
instance:-		datatype varname = value;	


access:-

static :- 	static prop's can be accessed by the class reference

instance :- instance prop's can be accessed by the object reference

					
		object creation			syntax:-
					
			classname objname = new classname();


MEMORY ALLOCATION:-

static:- static var's will get the memory only once when the class.

instance:- Instance var's will get the memory location for every object creation.
						

use:-

static:-	To represent the common data

instance:-	To represent the unique data		

memory area:-

static:-	method area

instance:-	heap area	

								ULTRA AB
				a  +  b


uniary operators			a++;a--			


method:-

		syntax:-		accessmodifier returntype methodname(parmas...){
		
							//loop body
							}
							
	*based on signature:-2 types of methods
	
	
	(1) static mthod
	syntax:-		accessmodifier static returntype methodname(parmas...){
		
							//loop body
							}
	
	(2)instance method
							
	syntax:-		accessmodifier returntype methodname(parmas...){
		
							//loop body
							}						
							
							
		OOPS:-
		=====
		
		
Inheritance:-Accquring the parent class features(var's,methods,constr...) to the child class.

		*For code Reusability.
		
		*For every java class the default Parent class is java.lang.Object class.
		
		*The default package for every java file is java.lang.
		
		*M.I will not be supported in java @class level
		
		*M.I will be supported in java @ Interface level
			

		extends 										implements
		
	class-->class									interface---->interface----
	
													interface---->calss
	class A{
	
	100 methods
	}
	
	class B extends A{
	
	20 methods		+ 100 method   =120 methods	
	}
	
	methods:-
	
	based on the implmentation(body) of a method:- 2 types of method's
	
	(1)Concreate method:-methods having method body/implmentation
	
	(2)Abstract method:- methods not having method body/implmentation
	
	syntax:- interface
	
				a.m returntype  methodname(parmas...);
	
	
	class:-collection of only concreate methods.
	
	
	Abstract class :- collection of concrete methods + collection  of abstract methods
	
					abst method	syntax:-public abstract void add(int a,int b);
	
	Interface :- collection of only abstract methods.
	
	
	Abstraction:-Hiding of the data.
	
				*enables the security of our logic/code/implmentation.
			
	class---no abstraction 
	
	abstract class----0-100% abstraction
	
	interface ------100% abstraction
	
	
	Polymorphism:-
	
	(1)method overloading:-same method name but difference in parmas
	
								(a)type of parmas
								(b)no:-of params
								(c)order of parmas
								
	
	(2)method overriding:-same method name but difference the implmentation/body.
	
	
	class Parent{
	
	//100 methods
	
	10cr.property(){}
	
	marriage(){
	
	kajol;
	}
	
	}	
	
	
	class child extends Parent{
	
	//100 methods
	
	10cr.property(){}
	
	@Override
	marriage(){
	
	deepika;
	}
	
	
	}
	
	
	Encapsulation:-Wrapping up the similar data into single unit.
	
	
	*to secure our private info
	
	public ,private ,default ,protected
	
	
	Constructor:- Object initilization
	
	*It will not have any return type.
	
	(1) default constructor:-
	
	syntax:-
	
				a.m classname(){
				
				//body
				}
	
	
	(2)parametrized constructor
	
	syntax:-
	
				a.m classname(params...){
				
				//body
				}
	
	Exception Handling:-
	
	(1)To throw user friendly error msg.
	
	(2)To terminate the program in a normal way.
			
			
			try catch finally
	
	Userdefined exceptions:-
	
	1.It must a child class to the Exception class.
	
	
	Arrays:-Group of variables of(Array is a container which is used to store) similar datatypes referred by a 
	
	
			common name
	
	Limitations:-
	============
	1.Homogenous data can be accepted
	
	2.Array size is fixed
	
	3.No utility methods
	
	syntax:-Array creation can be done in 3 ways:-
	
		(1) int arrname[] ={1,2,3,4,5,5,6,7};======>8
		
		(2)int arrname[] = new int[10];=============>10
		
		(3)int arrname[] = new int[]{1,2,3,4,5,5,6,7};>8
	
	
	
	collections:-(framework)
	
	
	1.Homogenous/Heterogenous data can be accepted
	
	2.Array size is not fixed
	
	3.Lots of utility methods
	
	
	*for implemented/ unimplemented methods @Override is used to change/add or implemention
	
	
									String:-
									======
									
									
	String			StringBuffer(synchronised) 			StringBuilder(not sync)
	
	Immutable					mutable
	
	
	
	sync:-(1)No Data loss
	
		   (2)One after another task
		   
		   (3)time taking
		   
		   
	Non-sync:-(1)Data loss
	
				(2)many tasks at time
		   
				(3)no time taking
				
				
		file handling:-		java.io
		
		
		(1)create a file				:-File
		
		
		(2)write into a file			:-FileWriter;
										  BufferedWriter;
										  PrintWriter.
		
		
		(3)read from a file				:-FileReader;
										  BufferedReader.
										  
										  
	
	
			Serialization:-The process of converting object data to byte data is called as Serialization
			==============
			
			
							
			
			De-Serialization:-The process of converting  byte data to object data is called as De-Serialization
			================
								
							FileOutputStream-->write into a file
							
							ObjectOutputStream ---->write into a file
							
							FileInputStream--->read
							
							Object InputStream --->read
			
			
			Employee emp = new Employee(emp details);
			
			
			
			
			
				TypeCasting:-It's assigning var of one datatype to var of another dt
				
				
					Implicit ty:-Automatic ty perfrom jvm.
						
					
					
					Explicit ty:-we should the take help of small same datatype.
					
							
					int var = 45
					
					short value = (int) var;
					
												java 8
												======
					java 8:-functional programming 
					
					
					Functional Interface:-(sam)Single abstract method -By the method is public abstract method
					
					
					super:-It is used to access parent class prop's
					
				Note :-constr call must be the first statement inside constr
				
					This:-It is used to access the current class prop's.
					
					
													DataBase:-
													
	Data:-Raw Info of any real world entites

	
	Database:-To store the data for future access( permenantly and securely) in a container in an organised way.												
													
		apple			458

		orange			343	
		
		grapes			56				
				
		RDBMS:- It will follows tables format to store the data
			
			
					Rows(Record)+Columns(fields)
					
		
		Query:-To do any operation we need to write a query.
					5 types:-
					
		(1)DDL(Data Definition Lang):-create,alter,drop,truncate,rename
		
		(2)DML(Data Manipulation Lang):-insert,update,delete
		
		(3)DRL(Data Retrival Lang):-select
		
		(4)DCL(Data Control Lang):-grant,revoke
		
		(5)TCL(Transaction Control Lang):-commit,rollback
		
			
					
		To create an account:-		querie's.			
				

		cmd>conn /as sysdba
		
		cmd>create user username identified by password;
		
		cmd>grant connect, resource to username;
		
		cmd>conn username/password;
		
		drop = deleting the entire table
					
		truncate = removes the data inside the table

		delete=	to delete choosen rows		
		
		
	DDL:-	AUTOCOMMITTED

	DML:-  Not Autocommitted